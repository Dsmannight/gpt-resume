{"ast":null,"code":"var _jsxFileName = \"/Users/santiagohernandez/resume/resume-website/src/chat/ChatPage.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { URL } from \"../constants\";\nimport \"./ChatPage.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatPage = () => {\n  _s();\n  const [input, setInput] = useState(\"\");\n  const [returnMessage, setReturnMessage] = useState(\"\");\n  const [talking, setTalking] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const timer = setInterval(() => {\n    setTalking(!talking); // updating the state\n  }, 200); // 200 milliseconds = 0.2 seconds\n\n  // Cleanup function to clear the timer when the component unmounts\n  const cleanUpTimer = () => clearInterval(timer);\n  const talkingControl = () => {\n    while (loading === true) {\n      timer;\n    }\n    cleanUpTimer();\n    set;\n  };\n  const handleSend = async () => {\n    setReturnMessage(\"\");\n    setTalking(true);\n    if (input.trim() !== '') {\n      setLoading(true);\n      // Add the user's message\n      setInput('');\n      // Add AI's message\n      const response = await fetch(`${URL}/api/talk`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          Body: input\n        })\n      });\n      const reader = response.body.getReader();\n      let incomingText = \"\";\n      while (true) {\n        const {\n          done,\n          value\n        } = await reader.read();\n        if (done) break;\n        const messages = new TextDecoder('utf-8').decode(value);\n        incomingText += messages;\n        setReturnMessage(incomingText);\n      }\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    // changeTalking()\n  }, [loading]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-page\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-interface\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-send-form\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"chat-input\",\n          type: \"text\",\n          value: input,\n          placeholder: \"Ask away...\",\n          onChange: e => setInput(e.target.value),\n          onKeyPress: e => e.key === 'Enter' ? handleSend() : null\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"send-button \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `skull-head-${talking ? \"close\" : \"open\"}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"return-message\",\n        children: returnMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 9\n  }, this);\n};\n_s(ChatPage, \"1bTiei5IFMAqqa6qsgwCLzKAA1o=\");\n_c = ChatPage;\nexport default ChatPage;\nvar _c;\n$RefreshReg$(_c, \"ChatPage\");","map":{"version":3,"names":["useState","useEffect","URL","jsxDEV","_jsxDEV","ChatPage","_s","input","setInput","returnMessage","setReturnMessage","talking","setTalking","loading","setLoading","timer","setInterval","cleanUpTimer","clearInterval","talkingControl","set","handleSend","trim","response","fetch","method","headers","body","JSON","stringify","Body","reader","getReader","incomingText","done","value","read","messages","TextDecoder","decode","className","children","type","placeholder","onChange","e","target","onKeyPress","key","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/santiagohernandez/resume/resume-website/src/chat/ChatPage.js"],"sourcesContent":["import { useState, useEffect } from \"react\"\nimport { URL } from \"../constants\"\nimport \"./ChatPage.css\"\n\nconst ChatPage = () => {\n    const [input, setInput] = useState(\"\")\n    const [returnMessage, setReturnMessage] = useState(\"\")\n    const [talking, setTalking] = useState(false)\n    const [loading, setLoading] = useState(false)\n\n    const timer = setInterval(() => {\n      setTalking(!talking)  // updating the state\n    }, 200);  // 200 milliseconds = 0.2 seconds\n\n    // Cleanup function to clear the timer when the component unmounts\n    const cleanUpTimer = () => clearInterval(timer);\n\n    const talkingControl = () => {\n      while(loading === true){\n        timer\n      }\n      cleanUpTimer()\n      set\n    }\n\n    const handleSend = async () => {\n        setReturnMessage(\"\")\n        setTalking(true)\n        if (input.trim() !== '') {\n          setLoading(true);\n          // Add the user's message\n          setInput('');\n          // Add AI's message\n          const response = await fetch(`${URL}/api/talk`, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n              Body: input\n            }),\n          })\n          const reader = response.body.getReader();\n          let incomingText = \"\"\n          while (true) {\n            const { done, value } = await reader.read();\n            if (done) break;\n            const messages = new TextDecoder('utf-8').decode(value);\n            incomingText += messages\n            setReturnMessage(incomingText)\n          }\n          setLoading(false);\n        }\n      }\n    \n    useEffect(() => {\n        // changeTalking()\n    }, [loading])\n\n    return(\n        <div className=\"chat-page\">\n            <div className=\"chat-interface\">\n                <div className=\"chat-send-form\">\n                    <input className=\"chat-input\"\n                        type=\"text\"\n                        value={input}\n                        placeholder=\"Ask away...\"\n                        onChange={e => setInput(e.target.value)}\n                        onKeyPress={e => e.key === 'Enter' ? handleSend() : null}\n                    />\n                    <span className=\"send-button \"></span>\n                </div>\n                <div className={`skull-head-${talking ? \"close\" : \"open\"}`}></div>\n                <div className=\"return-message\">\n                    {returnMessage}\n                </div>\n            </div>\n        </div>\n    )\n}\nexport default ChatPage;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}